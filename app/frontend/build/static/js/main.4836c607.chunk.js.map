{"version":3,"sources":["components/helperfunctions/HelperFunctions.jsx","components/detailview/DetailView.jsx","components/groupview/GroupView.jsx","components/header/Header.jsx","components/Main.js","serviceWorker.js","index.js"],"names":["getJSONData","url","fetch","then","response","status","json","data","console","log","catch","err","d3","domain","range","probabilityColor","DetailView","this","props","hideDetail","featureRows","dataDetails","map","index","feature","key","cellId","id","className","style","backgroundColor","cellColors","value","targetFeature","targetFeatureValue","Button","onClick","closeButtonClick","bind","size","renderIcon","Close16","iconDescription","Component","Table","DataTable","TableHead","TableHeader","TableBody","TableCell","TableRow","GroupView","state","visibleColumns","numDataRows","visibleRows","tableTitle","tableIsSortable","tableSize","dataRows","columnNames","columnDescription","datasetName","selecetedRowid","predictionsLoaded","dataLoaded","showTableView","maxNumericLength","tableHeight","baseUrl","window","location","protocol","host","dataEndpoint","predictEndpoint","colnameEndpoint","hideDetailView","predictionTitle","setState","showDetailView","Math","max","document","documentElement","clientHeight","body","scrollHeight","offsetHeight","colnames","coldesc","includes","unshift","loadData","documentHeight","getElementsByClassName","getBoundingClientRect","top","entries","i","row","length","getPredictions","slice","postData","predictURL","predictions","method","JSON","stringify","headers","currentData","prediction","dataRow","e","target","getAttribute","header","push","rows","maxLength","numShow","featureValue","undefined","substring","currentDataDetails","href","InlineLoading","min","isSortable","render","getHeaderProps","minHeight","stickyHeader","cursor","clickRow","rowid","cells","cell","rowindex","Header","history","createBrowserHistory","basename","forceRefresh","keyLength","getUserConfirmation","message","callback","confirm","listen","linkHolder","updateLh","hash","Main","exact","path","component","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"6YA4BO,SAASA,EAAYC,GACxB,OAAOC,MAAMD,GAAKE,MAAK,SAAUC,GAC7B,GAAwB,MAApBA,EAASC,OAIb,OAAOD,EAASE,OAAOH,MAAK,SAAUI,GAClC,OAAOA,KAJPC,QAAQC,IAAI,gDAAkDL,EAASC,WAM5EK,OAAM,SAAUC,GACfH,QAAQC,IAAI,kBAAmBE,MAuEPC,MAC3BC,OAAO,EAAE,GAAK,KACdC,MAAM,CACH,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAHnE,IAKMC,EAAmBH,MAC3BC,OAAO,CAAC,EAAG,KACXC,MAAM,CACH,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,Y,uBC1C3DE,G,oOA1DPC,KAAKC,MAAMC,e,+BAKL,IAAD,OAIDC,EAAcH,KAAKC,MAAMG,YAAYC,KAAI,SAACf,EAAMgB,GAChD,GAAqB,OAAjBhB,EAAKiB,QACL,OAAQ,yBAAKC,IAAK,YAAcF,IAEhC,IAAIG,EAASnB,EAAKoB,GAAK,IAAMpB,EAAKiB,QAClC,OACI,yBAAKC,IAAK,cAAgBF,EAAOK,UAAU,iBAAiBC,MAAO,CAAEC,gBAAiB,EAAKZ,MAAMa,WAAWL,KAExG,yBAAKE,UAAU,eAAf,IAA8B,0BAAMA,UAAU,YAAYrB,EAAKiB,QAAjC,KAA9B,KAAkFjB,EAAKyB,OAEvF,yBAAKJ,UAAU,UAAf,SAMhB,OACI,6BACI,yBAAKA,UAAU,4BACX,yBAAKA,UAAU,0BAAf,IAA0CX,KAAKC,MAAMe,cAArD,MAAuEhB,KAAKC,MAAMgB,mBAAlF,KACA,yBAAKN,UAAU,IACX,kBAACO,EAAA,EAAD,CACIC,QAASnB,KAAKoB,iBAAiBC,KAAKrB,MACpCsB,KAAM,QACNC,WAAYC,IACZC,gBAAiB,KAJrB,UAWR,yBAAKd,UAAU,kBAEX,yBAAKA,UAAU,eAAf,aAEA,yBAAKA,UAAU,UAAf,MAGJ,yBAAKA,UAAU,OACVR,Q,GA3DIuB,cCGjBC,EAAkEC,IAAlED,MAAOE,EAA2DD,IAA3DC,UAAWC,EAAgDF,IAAhDE,YAAaC,EAAmCH,IAAnCG,UAAWC,EAAwBJ,IAAxBI,UAAWC,EAAaL,IAAbK,SA4P9CC,E,kDAxPX,WAAYjC,GAAQ,IAAD,8BACf,cAAMA,IAEDkC,MAAQ,CACTC,eAAgB,GAChBC,YAAa,IACbC,YAAa,IAEbC,WAAY,IACZC,iBAAiB,EACjBC,UAAW,SACXC,SAAU,GACVC,YAAa,CAAC,MACdC,kBAAmB,GACnB5B,cAAe,GACf6B,YAAa,8BACb/B,WAAY,GACZgC,eAAgB,EAChBC,mBAAmB,EACnBC,YAAY,EACZC,eAAe,EACfC,iBAAkB,EAClBC,YAAa,SAGjB,EAAKC,QAAUC,OAAOC,SAASC,SAAW,KAAOF,OAAOC,SAASE,KACjE,EAAKC,aAAe,QACpB,EAAKC,gBAAkB,WAEvB,EAAKC,gBAAkB,YACvB,EAAKC,eAAiB,EAAKA,eAAevC,KAApB,gBAEtB,EAAKwC,gBAAkB,mBAhCR,E,6DAqCf7D,KAAK8D,SAAS,CAAEb,eAAe,EAAMc,gBAAgB,M,uCAIrD,OAAOC,KAAKC,IACRC,SAASC,gBAAgBC,aACzBF,SAASG,KAAKC,aACdJ,SAASC,gBAAgBG,aACzBJ,SAASG,KAAKE,aACdL,SAASC,gBAAgBI,gB,0CAIZ,IAAD,OAGDxF,EADQiB,KAAKoD,QAAUpD,KAAK2D,iBAElCzE,MAAK,SAACI,GACX,GAAIA,EAAM,CACN,IAAIkF,EAAWlF,EAAI,SACfmF,EAAUnF,EAAI,QACbkF,EAASE,SAAS,QACnBF,EAASG,QAAQ,MACjBF,EAAQE,QAAQ,OAGpBH,EAASG,QAAQrF,EAAI,OACrBmF,EAAQE,QAAQrF,EAAI,OAGpBkF,EAASG,QAAQ,EAAKd,iBACtBY,EAAQE,QAAQ,EAAKd,iBAErB,EAAKC,SAAS,CAAEnB,YAAa6B,EAAUxD,cAAe1B,EAAI,MAAWsD,kBAAmB6B,IACxF,EAAKG,eAIb,IAAIzB,EAAcnD,KAAK6E,iBAAmB,GAAKX,SAASY,uBAAuB,gBAAgB,GAAGC,wBAAwBC,IAE1HhF,KAAK8D,SAAS,CAAEX,YAAaA,EAAc,S,iCAKnC,IAAD,OACPnD,KAAK8D,SAAS,CAAEhD,WAAY,KAGjB/B,EADMiB,KAAKoD,QAAUpD,KAAKyD,aAAe,MAAQzD,KAAKmC,MAAME,aAElEnD,MAAK,SAACI,GAEP,IAFgB,EAEZwB,EAAa,GAFD,cAIKxB,EAAK2F,WAJV,IAIhB,2BAAqC,CAAC,IAAD,yBAA3BC,EAA2B,KAAxBC,EAAwB,KAC7BA,EAAG,GACHA,EAAG,GAASA,EAAG,GAAS,GAExBA,EAAG,GAASD,EAAI,GAEpBpE,EAAWqE,EAAG,GAAS,IAAM,EAAKhD,MAAMnB,eAAiBlB,EAAiBqF,EAAI,EAAKhD,MAAMnB,iBAV7E,8BAYhB,EAAK8C,SAAS,CACVpB,SAAUpD,EAAM+C,YAAa/C,EAAK8F,OAAQtE,WAAYA,EACtDkC,YAAY,IAEhB,EAAKqC,eAAe/F,Q,qCAMbA,GAAO,IAAD,OACjBA,EAAOA,EAAKgG,MAAM,EAAGtF,KAAKmC,MAAMG,aAChC,IFlF0BiD,EEkFtBC,EAAaxF,KAAKoD,QAAUpD,KAAK0D,gBACjC+B,GFnFsBF,EEmFiB,CAAEjG,KAAMA,GFlFhDL,MEkF4BuG,EFlFjB,CACdE,OAAQ,OACRrB,KAAMsB,KAAKC,UAAUL,GACrBM,QAAS,CACL,eAAgB,sBAErB3G,MAAK,SAAUC,GACd,GAAwB,MAApBA,EAASC,OAIb,OAAOD,EAASE,OAAOH,MAAK,SAAUI,GAClC,OAAOA,KAJPC,QAAQC,IAAI,gDAAkDL,EAASC,WAM5EK,OAAM,SAAUC,GACfH,QAAQC,IAAI,kBAAmBE,OEoE3BoB,EAAad,KAAKmC,MAAMrB,WAC5B2E,EAAYvG,MAAK,SAACI,GACd,IADuB,EACnBwG,EAAc,EAAK3D,MAAMO,SADN,cAGKpD,EAAI,YAAgB2F,WAHzB,IAGvB,2BAA2D,CAAC,IAAD,yBAAjDC,EAAiD,KAA9Ca,EAA8C,KACvDD,EAAYZ,GAAG,EAAKrB,iBAAmBkC,EACvCjF,EAAWxB,EAAI,IAAQ4F,GAAK,IAAM,EAAKrB,iBAAmB/D,EAAiBiG,IALxD,8BAOvB,EAAKjC,SAAS,CAAEkC,QAASF,EAAahF,WAAYA,EAAYiC,mBAAmB,S,+BAKhFkD,GACLjG,KAAK8D,SAAS,CAAEhB,eAAgBmD,EAAEC,OAAOC,aAAa,YAAalD,eAAe,EAAOc,gBAAgB,M,+BAGnG,IAAD,OACD8B,EAAU7F,KAAKmC,MAAMQ,YAAY2C,MAAM,EAAGtF,KAAKmC,MAAMC,gBAAgB/B,KAAI,SAACf,EAAMgB,GAChF,MAAQ,CAAEE,IAAKlB,EAAM8G,OAAQ,EAAKjE,MAAMS,kBAAkBtC,IAAUhB,MAIpEU,KAAKmC,MAAMQ,YAAYyC,QAAUpF,KAAKmC,MAAMC,gBAC5CyD,EAAQQ,KAAK,CAAE7F,IAAK,MAAO4F,OAAQ,QAGvC,IAAIE,EAAOtG,KAAKmC,MAAMO,SAAS4C,MAAM,EAAGtF,KAAKmC,MAAMG,aAAajC,KAAI,SAACf,EAAMgB,GACvE,IADiF,EFtJ5DS,EAAOwF,EEuJxBP,EAAU,GADmE,cAE7D,EAAK7D,MAAMQ,YAAY2C,MAAM,EAAG,EAAKnD,MAAMqE,UAFkB,IAEjF,2BAAyE,CAAC,IAAjEjG,EAAgE,QACjEkG,OAAiCC,IAAlBpH,EAAKiB,GAAyB,IAAMjB,EAAKiB,GAC5DyF,EAAQzF,IF1JSQ,EE0JmB0F,EAAe,GF1J3BF,EE0J+B,EAAKpE,MAAMe,iBFzJ1EnC,EAAMqE,QAAUmB,EACTxF,EAEMA,EAAM4F,UAAU,EAAGJ,GAAa,OEkJwC,8BAMjF,OAAQP,KAGRY,EAAqB,GAEzB,GAAI5G,KAAKmC,MAAMa,WAAY,CACvB,IAAImC,EAAMnF,KAAKmC,MAAMO,SAAS1C,KAAKmC,MAAMW,gBACzC8D,EAAqB,GAFE,oBAGF5G,KAAKmC,MAAMQ,YAAYsC,WAHrB,IAGvB,2BAAuD,CAAC,IAAD,yBAA7CC,EAA6C,KAA1C1E,EAA0C,KACnDoG,EAAmBP,KAAK,CAAE3F,GAAIyE,EAAG,GAAQ5E,QAASP,KAAKmC,MAAMS,kBAAkBsC,GAAInE,MAAOoE,EAAI3E,MAJ3E,+BAQ3B,OACI,6BAEI,yBAAKG,UAAU,6BAAf,+CAGA,yBAAKA,UAAU,+DAAf,OACQ,uBAAGkG,KAAK,0DAA0DX,OAAO,SAAzE,yBADR,yYAG2C,oCAAUlG,KAAKmC,MAAMG,aAHhE,+LAMA,yBAAK3B,UAAU,SACTX,KAAKmC,MAAMY,mBAET,yBAAKpC,UAAU,2BACX,yBAAKA,UAAU,gBAAf,IAA+B,kBAACmG,EAAA,EAAD,MAA/B,MACA,yBAAKnG,UAAU,8CAAf,sCAGPX,KAAKmC,MAAMY,mBAAqB,yBAAKpC,UAAU,oDAAf,YAA4EqD,KAAK+C,IAAI/G,KAAKmC,MAAMC,eAAgBpC,KAAKmC,MAAMQ,YAAYyC,QAAvI,QAAqJpF,KAAKmC,MAAMQ,YAAYyC,OAA5K,eAAgMpF,KAAKmC,MAAMG,YAA3M,aAIrC,yBAAK3B,UAAU,sBACX,yBAAKA,UAAU,2BACTX,KAAKmC,MAAMa,YACT,yBAAKrC,UAAWX,KAAKmC,MAAM4B,eAAiB,GAAK,eAC7C,kBAAC,EAAD,CACI3D,YAAawG,EACb5F,cAAehB,KAAKmC,MAAMnB,cAC1BF,WAAYd,KAAKmC,MAAMrB,WACvBZ,WAAYF,KAAK4D,eACjB3C,mBAAoBjB,KAAKmC,MAAMO,SAAS1C,KAAKmC,MAAMW,gBAAgB9C,KAAKmC,MAAMnB,mBAM7F,yBAAKL,UAAWX,KAAKmC,MAAMc,cAAgB,uBAAyB,eACjE,kBAACrB,EAAA,EAAD,CACIoF,WAAYhH,KAAKmC,MAAMK,gBACvB8D,KAAMA,EACNT,QAASA,EACToB,OAAQ,gBAAGX,EAAH,EAAGA,KAAMT,EAAT,EAASA,QAASqB,EAAlB,EAAkBA,eAAlB,OAEJ,kBAACvF,EAAD,CAAOf,MAAO,CAAEuG,UAAW,EAAKhF,MAAMgB,aAAexC,UAAU,iBAAiByG,aAAc,EAAKjF,MAAMiF,aAAc9F,KAAM,EAAKa,MAAMM,WACpI,kBAACZ,EAAD,KACI,kBAACI,EAAD,KACK4D,EAAQxF,KAAI,SAAA+F,GAAM,OACf,kBAACtE,EAAgBoF,EAAe,CAAEd,WAC7BA,EAAOA,aAKxB,kBAACrE,EAAD,KACKuE,EAAKjG,KAAI,SAAC8E,EAAK7E,GAAN,OACN,kBAAC2B,EAAD,CAAUrB,MAAO,CAAEyG,OAAQ,WAAalG,QAAS,EAAKmG,SAASjG,KAAK,GAAOb,IAAK2E,EAAIzE,GAAI6G,MAAOpC,EAAIzE,IAC9FyE,EAAIqC,MAAMnH,KAAI,SAAAoH,GAAI,OACf,kBAACzF,EAAD,CAAWpB,MAAO,CAAEC,gBAAiB,EAAKsB,MAAMrB,WAAW2G,EAAK/G,KAAOF,IAAKiH,EAAK/G,GAAI6G,MAAOpC,EAAIzE,GAAIgH,SAAUpH,GAAQmH,EAAK1G,qBAiB/J,mC,GA7OQW,a,MCITiG,MAdf,WACI,OAEI,yBAAKhH,UAAU,IAEX,yBAAKA,UAAU,UAAf,KACA,yBAAKA,UAAU,wB,OCOrBiH,EAAUC,YAAqB,CACjCC,SAAU,GACVC,cAAc,EACdC,UAAW,EAEXC,oBAAqB,SAACC,EAASC,GAAV,OAAuBA,EAAS9E,OAAO+E,QAAQF,OAGxEN,EAAQS,QAAO,SAAA/E,OAKf,IAAIgF,EAAa,GAEjB,SAASC,EAASjF,GAEVA,EAASkF,QAAQF,EACjBA,EAAWhF,EAASkF,MAAQF,EAAWhF,EAASkF,MAAQ,EAExDF,EAAWhF,EAASkF,MAAQ,EAKpCZ,EAAQS,QAAO,SAAA/E,GACXiF,EAASjF,M,IAoCEmF,E,kDA9BX,WAAYxI,GAAQ,IAAD,8BACf,cAAMA,IAEDkC,MAAQ,GAEboG,EAASlF,OAAOC,UALD,E,kGAcf,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MAEA,0BAAM3C,UAAU,uBACZ,kBAAC,IAAD,CAAO+H,OAAK,EAACC,KAAK,IAAIC,UAAW1G,U,GArBlCR,aClCCmH,QACW,cAA7BxF,OAAOC,SAASwF,UAEe,UAA7BzF,OAAOC,SAASwF,UAEhBzF,OAAOC,SAASwF,SAASC,MACvB,2DCZNC,IAAS/B,OAAO,kBAAC,EAAD,MAAS/C,SAAS+E,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlK,MAAK,SAAAmK,GACJA,EAAaC,gBAEd7J,OAAM,SAAA8J,GACLhK,QAAQgK,MAAMA,EAAMrB,c","file":"static/js/main.4836c607.chunk.js","sourcesContent":["\n\nimport * as d3 from \"d3\"\n\nexport function abbreviateString(value, maxLength) {\n    if (value.length <= maxLength) {\n        return value\n    } else {\n        let retval = value.substring(0, maxLength) + \"..\"\n        return retval\n    }\n}\n\n\nfunction intlFormat(num) {\n    return new Intl.NumberFormat().format(Math.round(num * 10) / 10);\n}\nexport function makeFriendly(num) {\n    if (num < 1 && num > 0) {\n        return num\n    }\n    if (Math.abs(num) >= 1000000)\n        return intlFormat(num / 1000000) + 'M';\n    if (Math.abs(num) >= 1000)\n        return intlFormat(num / 1000) + 'k';\n    return intlFormat(num);\n}\n\nexport function getJSONData(url) {\n    return fetch(url).then(function (response) {\n        if (response.status !== 200) {\n            console.log('Looks like there was a problem. Status Code: ' + response.status);\n            return;\n        }\n        return response.json().then(function (data) {\n            return data\n        });\n    }).catch(function (err) {\n        console.log('Fetch Error :-S', err);\n    });\n}\n\n\nexport function postJSONData(url, postData) {\n    return fetch(url, {\n        method: \"post\",\n        body: JSON.stringify(postData),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }).then(function (response) {\n        if (response.status !== 200) {\n            console.log('Looks like there was a problem. Status Code: ' + response.status);\n            return;\n        }\n        return response.json().then(function (data) {\n            return data\n        });\n    }).catch(function (err) {\n        console.log('Fetch Error :-S', err);\n    });\n}\n\n\nexport function ColorArray() {\n    let colorArray = [\n        \"#1f78b4\",\n        \"#b2df8a\",\n        \"#33a02c\",\n        \"#fb9a99\",\n        \"#e31a1c\",\n        \"#fdbf6f\",\n        \"#ff7f00\",\n        \"#6a3d9a\",\n        \"#cab2d6\",\n        \"#ffff99\",\n        \"#8fff4f\"\n    ]\n    return colorArray\n}\n\nexport function ColorExplanation(rowMin, rowMax, rowValue) {\n    let color = d3.scaleQuantize()\n        .domain([rowMin, rowMax])\n        .range(['#d6604d',\n            '#f4a582',\n            '#fddbc7',\n            '#f7f7f7',\n            '#d1e5f0',\n            '#92c5de',\n            '#4393c3']);\n    return color(rowValue)\n}\n\nexport function ColorArrayRGB() {\n    let colorArray = [\n        [141, 211, 199],\n        [255, 255, 179],\n        [190, 186, 218],\n        [251, 128, 114],\n        [128, 177, 211],\n        [253, 180, 98],\n        [179, 222, 105],\n        [252, 205, 229],\n        [188, 128, 189],\n        [204, 235, 197],\n    ]\n    return colorArray\n}\nexport const explanationColor = d3.scaleQuantize()\n    .domain([-0.5, 0.8])\n    .range([\n        '#4393c3', '#92c5de', '#d1e5f0', '#f7f7f7', '#fddbc7', '#f4a582', '#d6604d'\n    ]);\nexport const probabilityColor = d3.scaleQuantize()\n    .domain([0, 0.8])\n    .range([\n        '#4393c3', '#92c5de', '#d1e5f0', '#f7f7f7', '#fddbc7', '#f4a582', '#d6604d'\n    ]);\n","import React, { Component } from \"react\";\n// import * as _ from \"lodash\"\nimport { Close16 } from \"@carbon/icons-react\"\nimport { Button } from 'carbon-components-react';\nimport \"./detailview.css\"\n\n\nclass DetailView extends Component {\n    // constructor(props) {\n    //     super(props)\n\n    // }\n    componentDidMount() {\n\n    }\n\n    closeButtonClick() {\n        this.props.hideDetail()\n    }\n\n\n\n    render() {\n\n        // console.log(this.props.explanation);\n\n        let featureRows = this.props.dataDetails.map((data, index) => {\n            if (data.feature === \"id\") {\n                return (<div key={\"hiddenrow\" + index}></div>)\n            } else {\n                let cellId = data.id + \":\" + data.feature\n                return (\n                    <div key={\"explanation\" + index} className=\"flex detailrow\" style={{ backgroundColor: this.props.cellColors[cellId] }} >\n\n                        <div className=\" flex8  p10\"> <span className=\"boldtext\">{data.feature} </span>: {data.value}</div>\n                        {/* <div className=\"p10 expdiv\">  {data.explanation}</div> */}\n                        <div className=\"flex2 \"> </div>\n                    </div>\n                )\n            }\n        });\n\n        return (\n            <div>\n                <div className=\"flex lightgreyhighlight \">\n                    <div className=\"flexfull m10 boldtext \"> {this.props.targetFeature} : {this.props.targetFeatureValue} </div>\n                    <div className=\"\">\n                        <Button\n                            onClick={this.closeButtonClick.bind(this)}\n                            size={\"field\"}\n                            renderIcon={Close16}\n                            iconDescription={\".\"}\n                        >\n                            Back\n                        </Button>\n                    </div>\n\n                </div>\n                <div className=\"flex detailrow\" >\n\n                    <div className=\" flex4  p10\"> Feature </div>\n                    {/* <div className=\"p10 expdiv\">  Explanation Weight </div> */}\n                    <div className=\"flex6 \"> </div>\n                </div>\n\n                <div className=\"mt5\">\n                    {featureRows}\n                </div>\n            </div>\n\n\n        );\n    }\n}\n\nexport default DetailView;","// Web interface to visualize example Anomaly Detection Interaction.\n// Data is visualized using the Carbon Desgin System Data Table.\n// Data is\n\n\nimport React, { Component } from \"react\";\nimport { DataTable, InlineLoading } from 'carbon-components-react';\nimport { getJSONData, probabilityColor, abbreviateString, postJSONData } from \"../helperfunctions/HelperFunctions\"\nimport \"./groupview.css\"\nimport DetailView from \"../detailview/DetailView\";\nconst { Table, TableHead, TableHeader, TableBody, TableCell, TableRow } = DataTable;\n\n\nclass GroupView extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            visibleColumns: 12,\n            numDataRows: 300,\n            visibleRows: 300,\n            // stickyHeader: true,\n            tableTitle: \" \",\n            tableIsSortable: false,\n            tableSize: \"normal\", //tall short normal\n            dataRows: [],\n            columnNames: [\"id\"],\n            columnDescription: {},\n            targetFeature: \"\",\n            datasetName: \"KDD 99, Intrusion Detection\",\n            cellColors: {},\n            selecetedRowid: 0,\n            predictionsLoaded: false,\n            dataLoaded: false,\n            showTableView: true,\n            maxNumericLength: 7,\n            tableHeight: \"600px\"\n        }\n\n        this.baseUrl = window.location.protocol + \"//\" + window.location.host;\n        this.dataEndpoint = \"/data\"\n        this.predictEndpoint = \"/predict\"\n\n        this.colnameEndpoint = \"/colnames\"\n        this.hideDetailView = this.hideDetailView.bind(this);\n\n        this.predictionTitle = \"Model Prediction\"\n    }\n\n    // Hide detail view\n    hideDetailView() {\n        this.setState({ showTableView: true, showDetailView: false })\n    }\n\n    documentHeight() {\n        return Math.max(\n            document.documentElement.clientHeight,\n            document.body.scrollHeight,\n            document.documentElement.scrollHeight,\n            document.body.offsetHeight,\n            document.documentElement.offsetHeight\n        );\n    }\n\n    componentDidMount() {\n        // Fetch Feature List / Data Header\n        let getDataHeaderURL = this.baseUrl + this.colnameEndpoint\n        let colnames = getJSONData(getDataHeaderURL)\n        colnames.then((data) => {\n            if (data) {\n                let colnames = data[\"colnames\"]\n                let coldesc = data[\"coldesc\"]\n                if (!colnames.includes(\"id\")) {\n                    colnames.unshift(\"id\")\n                    coldesc.unshift(\"id\")\n                }\n                // Add target label to headers\n                colnames.unshift(data[\"label\"])\n                coldesc.unshift(data[\"label\"])\n\n                // Add prediction label to headers\n                colnames.unshift(this.predictionTitle)\n                coldesc.unshift(this.predictionTitle)\n\n                this.setState({ columnNames: colnames, targetFeature: data[\"label\"], columnDescription: coldesc })\n                this.loadData()\n            }\n        })\n\n        let tableHeight = this.documentHeight() - 10 - document.getElementsByClassName(\"tablecontent\")[0].getBoundingClientRect().top\n\n        this.setState({ tableHeight: tableHeight + \"px\" })\n    }\n\n\n    // Load Data from Model End Point\n    loadData() {\n        this.setState({ cellColors: {} })\n        // Fetch Data after features have arrived\n        let getDataURL = this.baseUrl + this.dataEndpoint + \"?n=\" + this.state.numDataRows\n        let data = getJSONData(getDataURL)\n        data.then((data) => {\n            //Create Colors for Target Column \n            let cellColors = {}\n            // Datable requires string id\n            for (let [i, row] of data.entries()) {\n                if (row[\"id\"]) {\n                    row[\"id\"] = row[\"id\"] + \"\";\n                } else {\n                    row[\"id\"] = i + \"\";\n                }\n                cellColors[row[\"id\"] + \":\" + this.state.targetFeature] = probabilityColor(row[this.state.targetFeature])\n            }\n            this.setState({\n                dataRows: data, numDataRows: data.length, cellColors: cellColors,\n                dataLoaded: true\n            })\n            this.getPredictions(data)\n        })\n    }\n\n\n    // Make requests to model endpoint to get predictions\n    getPredictions(data) {\n        data = data.slice(0, this.state.visibleRows)\n        let predictURL = this.baseUrl + this.predictEndpoint\n        let predictions = postJSONData(predictURL, { data: data })\n        let cellColors = this.state.cellColors\n        predictions.then((data) => {\n            let currentData = this.state.dataRows\n\n            for (let [i, prediction] of data[\"predictions\"].entries()) {\n                currentData[i][this.predictionTitle] = prediction\n                cellColors[data[\"ids\"][i] + \":\" + this.predictionTitle] = probabilityColor(prediction)\n            }\n            this.setState({ dataRow: currentData, cellColors: cellColors, predictionsLoaded: true })\n        })\n    }\n\n    // handle row click event \n    clickRow(e) {\n        this.setState({ selecetedRowid: e.target.getAttribute(\"rowindex\"), showTableView: false, showDetailView: true })\n    }\n\n    render() {\n        let headers = this.state.columnNames.slice(0, this.state.visibleColumns).map((data, index) => {\n            return ({ key: data, header: this.state.columnDescription[index] || data })\n        });\n\n        // Add elispsis if we arent showing all feature columns\n        if (this.state.columnNames.length >= this.state.visibleColumns) {\n            headers.push({ key: \"...\", header: \"...\" })\n        }\n\n        let rows = this.state.dataRows.slice(0, this.state.visibleRows).map((data, index) => {\n            let dataRow = {}\n            for (let feature of this.state.columnNames.slice(0, this.state.numShow)) {\n                let featureValue = data[feature] === undefined ? \"_\" : data[feature]\n                dataRow[feature] = abbreviateString(featureValue + \"\", this.state.maxNumericLength)\n            }\n            return (dataRow)\n        });\n\n        let currentDataDetails = []\n\n        if (this.state.dataLoaded) {\n            let row = this.state.dataRows[this.state.selecetedRowid];\n            currentDataDetails = []\n            for (let [i, key] of this.state.columnNames.entries()) {\n                currentDataDetails.push({ id: row[\"id\"], feature: this.state.columnDescription[i], value: row[key] })\n            }\n        }\n\n        return (\n            <div>\n\n                <div className=\"boldtext sectiontitle p10\">\n                    Anomaly Detection on Network Intrusion Data\n                </div>\n                <div className=\"mynotif mt10 h100 lh10  lightgreyhighlight p10 maxh16  mb10\">\n                    The <a href=\"http://kdd.ics.uci.edu/databases/kddcup99/kddcup99.html\" target=\"black\">KDD network intrusion</a>  dataset is a dataset of TCP connections that have been labeled as normal or representative of network attacks.\n                    Each TCP connection is represented as a set of attributes or features (derived based on domain knowledge) pertaining to each connection such as the number of failed logins, connection duration, data bytes from source to destination, etc.\n                    The table below is a random sample of  <strong> {this.state.visibleRows}</strong> test data points which are being classified as normal or abnormal by a trained\n                    autoencoder model. The original ground truth label (label) as well as the prediction by the model is shown.\n                </div>\n                <div className=\"flex\">\n                    {!this.state.predictionsLoaded &&\n                        //\n                        <div className=\"smalldesc   iblock flex\">\n                            <div className=\"iblock   mr5\"> <InlineLoading></InlineLoading>  </div>\n                            <div className=\"iblock   flex flexcolumn flexjustifycenter\"> loading anomaly predictions ... </div>\n\n                        </div>}\n                    {this.state.predictionsLoaded && <div className=\"smalldesc p10  flex flexcolumn flexjustifycenter\">Showing  {Math.min(this.state.visibleColumns, this.state.columnNames.length)}  of {this.state.columnNames.length}   columns  {this.state.visibleRows}  rows. </div>}\n\n                </div>\n\n                <div className=\"positionrelative  \">\n                    <div className=\"positionabsolute   w100\">\n                        {(this.state.dataLoaded) &&\n                            <div className={this.state.showDetailView ? \"\" : \"displaynone\"}>\n                                <DetailView\n                                    dataDetails={currentDataDetails}\n                                    targetFeature={this.state.targetFeature}\n                                    cellColors={this.state.cellColors}\n                                    hideDetail={this.hideDetailView}\n                                    targetFeatureValue={this.state.dataRows[this.state.selecetedRowid][this.state.targetFeature]}\n                                ></DetailView>\n                            </div>\n                        }\n                    </div>\n\n                    {<div className={this.state.showTableView ? \"mb10  datatable-body\" : \"displaynone\"}>\n                        <DataTable\n                            isSortable={this.state.tableIsSortable}\n                            rows={rows}\n                            headers={headers}\n                            render={({ rows, headers, getHeaderProps }) => (\n                                // <TableContainer title={this.state.tableTitle + this.state.datasetName}>\n                                <Table style={{ minHeight: this.state.tableHeight }} className=\" tablecontent \" stickyHeader={this.state.stickyHeader} size={this.state.tableSize}>\n                                    <TableHead>\n                                        <TableRow>\n                                            {headers.map(header => (\n                                                <TableHeader {...getHeaderProps({ header })}>\n                                                    {header.header}\n                                                </TableHeader>\n                                            ))}\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {rows.map((row, index) => (\n                                            <TableRow style={{ cursor: \"pointer\" }} onClick={this.clickRow.bind(this)} key={row.id} rowid={row.id}>\n                                                {row.cells.map(cell => (\n                                                    <TableCell style={{ backgroundColor: this.state.cellColors[cell.id] }} key={cell.id} rowid={row.id} rowindex={index}>{cell.value}</TableCell>\n                                                ))}\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                                // </TableContainer>\n                            )}\n                        />\n                    </div>}\n\n                </div>\n\n\n\n\n\n                <div>\n                    {/* {JSON.stringify(this.state.dataRows)} */}\n                    {/* {explanationColor(0.1) + \"\\t\" + JSON.stringify(this.state.cellColors)} */}\n                </div>\n\n\n            </div>\n\n        );\n    }\n}\n\nexport default GroupView;","import React from 'react';\nimport './header.css';\n\nfunction Header() {\n    return (\n\n        <div className=\"\">\n\n            <div className=\"topbar\"> </div>\n            <div className=\"pl20  headertitle\">\n                {/* Refractor 2.0 */}\n            </div>\n\n        </div>\n    );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport {\n    Route,\n    HashRouter,\n\n} from \"react-router-dom\";\n\n\nimport \"./main.css\"\n\nimport GroupView from \"./groupview/GroupView\";\nimport AppHeader from \"./header/Header\";\nimport { createBrowserHistory } from 'history';\n\n\n\nconst history = createBrowserHistory({\n    basename: \"\", // The base URL of the app (see below)\n    forceRefresh: false, // Set true to force full page refreshes\n    keyLength: 6, // The length of location.key\n    // A function to use to confirm navigation with the user (see below)\n    getUserConfirmation: (message, callback) => callback(window.confirm(message))\n});\n\nhistory.listen(location => {\n\n    // console.log(location.pathname, location.hash)\n})\n\nlet linkHolder = {}\n\nfunction updateLh(location) {\n\n    if (location.hash in linkHolder) {\n        linkHolder[location.hash] = linkHolder[location.hash] + 1\n    } else {\n        linkHolder[location.hash] = 0\n    }\n\n}\n\nhistory.listen(location => {\n    updateLh(location)\n});\n\n\nclass Main extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        }\n        updateLh(window.location)\n    }\n\n    componentDidMount() {\n\n    }\n    render() {\n\n\n        return (\n            <HashRouter>\n                <AppHeader></AppHeader>\n\n                <main className=\"container-fluid p10\">\n                    <Route exact path=\"/\" component={GroupView} />\n                    {/* <Route exact path=\"/train\" component={Train} /> */}\n\n                </main>\n                {/* <div id=\"footer\"> <Footer /> </div> */}\n            </HashRouter>\n\n        );\n    }\n}\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './template.scss';\nimport App from './components/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}